{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\";\n\nfunction useFetchAPI(url) {\n  _s();\n\n  const baseURL = process.env.NODE_ENV === \"development\" ? \"http://localhost:3001/api\" : \"DEPLOYED LOCATION\";\n  const [isLoading, setIsLoading] = useState(false);\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [options, setOptions] = useState({});\n  const [isMessageOpen, setIsMessageOpen] = useState(false);\n  const [successMessageValue, setSuccessMessage] = useState(null);\n  const {\n    dispatch\n  } = useContext(AuthContext);\n\n  function handleMessageOpen() {\n    setIsMessageOpen(true);\n  }\n\n  function handleMessageClose() {\n    setError(null);\n    setResponse(null);\n    setIsMessageOpen(false);\n    setSuccessMessage(null);\n  }\n\n  function handleAPICallButtonSubmit(options = {}) {\n    setOptions(options);\n    setIsLoading(true);\n  }\n\n  async function handleAPIFetchCall() {\n    const requestOptionObj = { ...options,\n      withCredentials: true,\n      credentials: \"include\",\n      ...{\n        headers: {\n          authorization: null\n        }\n      }\n    };\n\n    try {\n      let response = await axios(baseURL + url, requestOptionObj);\n      console.log(response);\n\n      if (response.data.message === \"user created\") {\n        setResponse(response.data.message);\n        setIsLoading(false);\n        handleMessageOpen();\n        setSuccessMessage(response.data.message);\n      } else {\n        setIsLoading(false);\n        dispatch({\n          type: \"LOGIN\",\n          user: {\n            email: response.data.user.email,\n            username: response.data.user.username\n          }\n        });\n      }\n    } catch (e) {\n      //console.log(e.response);\n      setError(e.response.data.message);\n      setIsLoading(false);\n      handleMessageOpen();\n    }\n  }\n\n  useEffect(() => {\n    if (!isLoading) {\n      return;\n    }\n\n    handleAPIFetchCall();\n  }, [isLoading, url, options, baseURL]);\n  return [{\n    isLoading,\n    response,\n    error,\n    setError,\n    setResponse\n  }, handleAPICallButtonSubmit, isMessageOpen, handleMessageOpen, handleMessageClose, successMessageValue];\n}\n\n_s(useFetchAPI, \"RIzCs7DC8v1Ehvsy4JuN7ci2icA=\");\n\nexport default useFetchAPI;","map":{"version":3,"sources":["/Users/michael/Desktop/code-immersives-true/patrito-mdt-frontend-hooks/src/components/hooks/useFetchAPI.js"],"names":["useState","useEffect","useContext","axios","AuthContext","useFetchAPI","url","baseURL","process","env","NODE_ENV","isLoading","setIsLoading","response","setResponse","error","setError","options","setOptions","isMessageOpen","setIsMessageOpen","successMessageValue","setSuccessMessage","dispatch","handleMessageOpen","handleMessageClose","handleAPICallButtonSubmit","handleAPIFetchCall","requestOptionObj","withCredentials","credentials","headers","authorization","console","log","data","message","type","user","email","username","e"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\n\nimport { AuthContext } from \"../../context/AuthContext\";\n\nfunction useFetchAPI(url) {\n  const baseURL =\n    process.env.NODE_ENV === \"development\"\n      ? \"http://localhost:3001/api\"\n      : \"DEPLOYED LOCATION\";\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [options, setOptions] = useState({});\n\n  const [isMessageOpen, setIsMessageOpen] = useState(false);\n\n  const [successMessageValue, setSuccessMessage] = useState(null);\n\n  const { dispatch } = useContext(AuthContext);\n\n  function handleMessageOpen() {\n    setIsMessageOpen(true);\n  }\n  function handleMessageClose() {\n    setError(null);\n    setResponse(null);\n    setIsMessageOpen(false);\n    setSuccessMessage(null);\n  }\n\n  function handleAPICallButtonSubmit(options = {}) {\n    setOptions(options);\n    setIsLoading(true);\n  }\n\n  async function handleAPIFetchCall() {\n    const requestOptionObj = {\n      ...options,\n      withCredentials: true,\n      credentials: \"include\",\n      ...{\n        headers: {\n          authorization: null,\n        },\n      },\n    };\n\n    try {\n      let response = await axios(baseURL + url, requestOptionObj);\n      console.log(response);\n\n      if (response.data.message === \"user created\") {\n        setResponse(response.data.message);\n        setIsLoading(false);\n        handleMessageOpen();\n        setSuccessMessage(response.data.message);\n      } else {\n        setIsLoading(false);\n        dispatch({\n          type: \"LOGIN\",\n          user: {\n            email: response.data.user.email,\n            username: response.data.user.username,\n          },\n        });\n      }\n    } catch (e) {\n      //console.log(e.response);\n      setError(e.response.data.message);\n      setIsLoading(false);\n      handleMessageOpen();\n    }\n  }\n\n  useEffect(() => {\n    if (!isLoading) {\n      return;\n    }\n\n    handleAPIFetchCall();\n  }, [isLoading, url, options, baseURL]);\n\n  return [\n    { isLoading, response, error, setError, setResponse },\n    handleAPICallButtonSubmit,\n    isMessageOpen,\n    handleMessageOpen,\n    handleMessageClose,\n    successMessageValue,\n  ];\n}\n\nexport default useFetchAPI;\n"]},"metadata":{},"sourceType":"module"}