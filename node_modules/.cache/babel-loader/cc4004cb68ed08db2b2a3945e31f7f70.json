{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nfunction useChangeInputConfig(inputType) {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [isDisabled, setIsDisabled] = useState(true);\n\n  function onChange(e) {\n    let value = e.target.value;\n    setValue(value);\n    checkInput(value);\n  }\n\n  function clearInput() {\n    setValue(\"\");\n  } //here you can use other validation to check for correct input from user\n\n\n  function checkInput(value) {\n    if (value.length === 0) {\n      setIsError(true);\n      setErrorMessage(`${inputType} is required`);\n      setIsDisabled(true);\n    } else {\n      setIsError(false);\n      setErrorMessage(``);\n      setIsDisabled(false);\n    }\n  }\n\n  return [value, onChange, isError, errorMessage, isDisabled, clearInput];\n}\n\n_s(useChangeInputConfig, \"ulE0uaXUC2mexxN+PBTgJWTWLoI=\");\n\nexport default useChangeInputConfig;","map":{"version":3,"sources":["/Users/michael/Desktop/code-immersives-true/patrito-mdt-frontend-hooks/src/components/hooks/useInput.js"],"names":["useState","useChangeInputConfig","inputType","value","setValue","isError","setIsError","errorMessage","setErrorMessage","isDisabled","setIsDisabled","onChange","e","target","checkInput","clearInput","length"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,oBAAT,CAA8BC,SAA9B,EAAyC;AAAA;;AACvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,IAAD,CAA5C;;AAEA,WAASW,QAAT,CAAkBC,CAAlB,EAAqB;AACnB,QAAIT,KAAK,GAAGS,CAAC,CAACC,MAAF,CAASV,KAArB;AAEAC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AAEAW,IAAAA,UAAU,CAACX,KAAD,CAAV;AACD;;AAED,WAASY,UAAT,GAAsB;AACpBX,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAjBsC,CAmBvC;;;AACA,WAASU,UAAT,CAAoBX,KAApB,EAA2B;AACzB,QAAIA,KAAK,CAACa,MAAN,KAAiB,CAArB,EAAwB;AACtBV,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,eAAe,CAAE,GAAEN,SAAU,cAAd,CAAf;AACAQ,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAJD,MAIO;AACLJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,eAAe,CAAE,EAAF,CAAf;AACAE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF;;AAED,SAAO,CAACP,KAAD,EAAQQ,QAAR,EAAkBN,OAAlB,EAA2BE,YAA3B,EAAyCE,UAAzC,EAAqDM,UAArD,CAAP;AACD;;GAjCQd,oB;;AAmCT,eAAeA,oBAAf","sourcesContent":["import { useState } from \"react\";\n\nfunction useChangeInputConfig(inputType) {\n  const [value, setValue] = useState(\"\");\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const [isDisabled, setIsDisabled] = useState(true);\n\n  function onChange(e) {\n    let value = e.target.value;\n\n    setValue(value);\n\n    checkInput(value);\n  }\n\n  function clearInput() {\n    setValue(\"\");\n  }\n\n  //here you can use other validation to check for correct input from user\n  function checkInput(value) {\n    if (value.length === 0) {\n      setIsError(true);\n      setErrorMessage(`${inputType} is required`);\n      setIsDisabled(true);\n    } else {\n      setIsError(false);\n      setErrorMessage(``);\n      setIsDisabled(false);\n    }\n  }\n\n  return [value, onChange, isError, errorMessage, isDisabled, clearInput];\n}\n\nexport default useChangeInputConfig;\n"]},"metadata":{},"sourceType":"module"}